"""
Create 4 unique devolved programmes for each KCCA division with KPIs and random progress.

This script:
- Creates 4 programmes per division (marked as direct via division_id)
- Adds 4 KPIs per programme with random target/current and units
- Creates division.programme.rel entries (is_direct auto-derived)
- Randomizes budget/utilization and beneficiary figures on the relationship
- Optionally links programme indicators to existing strategic KPIs for cascade analytics

Run in Odoo shell:
  odoo-bin shell -d robust_pmis -c "exec(open('addons/robust_pmis/create_direct_programmes_demo.py').read(), {'env': env})"
"""

import random
from datetime import date, timedelta


Division = env['kcca.division']
Programme = env['kcca.programme']
Rel = env['division.programme.rel']
PInd = env['performance.indicator']
SKPI = env['key.performance.indicator']

random.seed(42)

divisions = Division.search([])
print(f"Found divisions: {len(divisions)}")

# Gather a pool of strategic KPIs to optionally link to
strategic_kpis = SKPI.search([], limit=50)

created_programmes = 0
created_relations = 0
created_indicators = 0

for div in divisions:
    # Generate 4 unique programme names for this division
    base_names = [
        "Urban Services Upgrade",
        "Community Infrastructure",
        "Operational Excellence",
        "Sustainable City Initiative",
        "Digital City Enablement",
        "Public Health Enhancement",
        "Environmental Stewardship",
        "Education Support Programme",
    ]
    random.shuffle(base_names)
    target_names = [f"DEMO â€“ {div.code or div.name} â€“ {base_names[i]}" for i in range(4)]

    for idx, prog_name in enumerate(target_names, start=1):
        # Idempotency: skip if programme already exists by name
        if Programme.search_count([('name', '=', prog_name)]):
            print(f"ðŸ“Œ Programme exists, skip: {prog_name}")
            continue

        # Create programme (direct = division_id set; also set directorate to be consistent)
        prog_vals = {
            'name': prog_name,
            'code': f"{(div.code or div.name)[:3].upper()}-DP{idx:02d}",
            'description': f"Autogenerated devolved programme for division {div.name}",
            'sequence': 50 + idx,
            'active': True,
            'directorate_id': div.directorate_id.id if div.directorate_id else False,
            'division_id': div.id,
            'programme_manager_id': env.user.id,
            'start_date': date.today() - timedelta(days=random.randint(60, 400)),
            'end_date': date.today() + timedelta(days=random.randint(120, 540)),
            'budget': float(random.randint(200, 1500)) * 1_000_000.0,
            'currency_id': env.company.currency_id.id,
        }
        programme = Programme.create(prog_vals)
        created_programmes += 1
        print(f"âœ… Created Programme: {programme.name}")

        # Create division-programme relationship (is_direct auto-computed)
        allocated = float(random.randint(50, 500)) * 1_000_000.0
        utilized = allocated * random.uniform(0.3, 0.95)
        target_bens = random.randint(500, 5000)
        actual_bens = int(target_bens * random.uniform(0.2, 0.98))

        rel = Rel.create({
            'division_id': div.id,
            'programme_id': programme.id,
            'implementation_status': random.choice(['planning', 'implementing', 'monitoring', 'completed']),
            'priority_level': random.choice(['low', 'medium', 'high', 'critical']),
            'allocated_budget': allocated,
            'utilized_budget': utilized,
            'target_beneficiaries': target_bens,
            'actual_beneficiaries': actual_bens,
            'start_date': programme.start_date,
            'end_date': programme.end_date,
            'division_coordinator_id': env.user.id,
            'programme_officer_id': env.user.id,
        })
        created_relations += 1

        # Create 4 KPIs per programme with random progress
        kpi_templates = [
            ("Service Coverage", "%", 'increasing'),
            ("Processing Time", "Days", 'decreasing'),
            ("Citizen Satisfaction", "%", 'increasing'),
            ("Deliverables Completed", "Number", 'increasing'),
            ("Budget Utilization", "%", 'target'),
        ]
        random.shuffle(kpi_templates)
        for k_idx, (kname, unit, itype) in enumerate(kpi_templates[:4], start=1):
            tval = random.uniform(50, 100)
            # For decreasing indicators, set a baseline above target and current between
            if itype == 'decreasing':
                baseline = random.uniform(tval + 10, tval + 40)
                cval = random.uniform(tval, baseline)
            elif itype == 'target':
                # target indicators: current around target with some deviation
                baseline = 0.0
                cval = max(0.0, tval + random.uniform(-15, 15))
            else:
                baseline = 0.0
                cval = random.uniform(tval * 0.3, tval * 1.1)

            pind = PInd.create({
                'name': f"{programme.code} â€“ {kname}",
                'description': f"KPI '{kname}' for programme {programme.name}",
                'programme_id': programme.id,
                'measurement_unit': unit,
                'indicator_type': itype,
                'target_value': round(tval, 2),
                'current_value': round(cval, 2),
                'baseline_value': round(baseline, 2),
                'responsible_directorate_id': div.directorate_id.id if div.directorate_id else False,
                'responsible_division_id': div.id,
                'start_date': programme.start_date,
                'end_date': programme.end_date,
            })
            created_indicators += 1

            # Optionally link to a strategic KPI to visualize cascade
            if strategic_kpis:
                skpi = random.choice(strategic_kpis)
                pind.write({
                    'parent_strategic_kpi_id': skpi.id,
                    'target_allocation_percentage': random.choice([10.0, 15.0, 20.0, 25.0]),
                    'strategic_kpi_ids': [(4, skpi.id)],
                })

# Commit and summarize
env.cr.commit()
print("\n=== SUMMARY ===")
print(f"Programmes created: {created_programmes}")
print(f"Division-Programme relations created: {created_relations}")
print(f"Programme KPIs created: {created_indicators}")

print("\nTip: Refresh dashboards (Ctrl+F5). Division/Directorate performance and analytics should reflect the new data.")
